
from qubricks import Basis


	@abstractmethod
	def __basis_init__(self, name="", dim=None, parameters=None, **kwargs):
		'''
		Basis.__basis_init__ is called during the basis initialisation
		routines, allowing Basis subclasses to initialise themselves.
		'''
		pass
	
	@property
	def name(self):
		'''
		A friendly name to be used in errors and user-facing messages.
		'''
		return self.__name
	
	def __repr__(self):
		return "<%s(Basis) '%s'>" % (self.__class__.__name__, self.name)
	
	@property
	def dim(self):
		'''
		The dimension of the basis; or equivalently, the number of basis states.
		'''
		if self.__dim == None:
			self.__dim = self.operator().shape[0]
		return self.__dim
	
	@property
	def p(self):
		'''
		A reference to the Parameters instance used by the Operator objects.
		'''
		return self.__parameters
	
	@abstractproperty
	def operator(self):
		'''
		Basis.operator must return an Operator object with basis states as the 
		columns. The operator should use the parameters instance provided by the
		Basis subclass.
		'''
		raise NotImplementedError, "Basis operator has not been implemented."
